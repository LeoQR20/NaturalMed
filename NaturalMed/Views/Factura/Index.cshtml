@model Infraestructura.Models.Factura

@{
    ViewBag.Title = "Orden";
}

@using (Html.BeginForm("Save", "Factura", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div style="margin-top:0%; margin-bottom:0%;">
        <h2>Orden </h2>
        <hr />
        <div class="form-horizontal needs-validation" novalidate>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.FechaCreacion, htmlAttributes: new { @class = "col-form-label" })
                        <div class="col-md-10">
                            @Html.HiddenFor(model => model.FechaCreacion, htmlAttributes: new
                       {
                           @class = "form-control",
                           @Value = DateTime.Now.ToString("yyyy-MM-dd"),
                           @readonly = "readonly"
                       })
                            @Html.ValidationMessageFor(model => model.FechaCreacion, "", new { @class = "text-danger" })
                        </div>
                        @* Para Mostrar la fecha en un formato agradable para el usuario *@
                        <div class="col-md-10">
                            @{
                                string format = "dd 'de' MMMM 'del' yyyy";
                                var now = DateTime.Now.ToString(format);
                                <h4 style="color: gray">@now</h4>
                            }
                        </div>
                        <hr />
                        <h3 style="margin-top: 1%">Información del Cliente</h3>
                        <div class="form-group needs-validation" novalidate>
                            @Html.LabelFor(model => model.Cliente.Nombre, htmlAttributes: new { @class = "control-label col-md-2 Nombre" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Cliente.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Cliente.Nombre, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Cliente.Apellidos, htmlAttributes: new { @class = "control-label col-md-2 Apellidos" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Cliente.Apellidos, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Cliente.Apellidos, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Cliente.Telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Cliente.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Cliente.Telefono, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Cliente.email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Cliente.email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Cliente.email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <hr />
                <div id="resultadoDetalle" class="col-md-12">
                    <div class="col-md-12">
                        @if (NaturalMed.ViewModels.ViewModelCarrito.Instancia.Items.Count() > 0)
                        {
                            <h3>Resumen de la Orden</h3>
                            @Html.Partial("~/Views/Factura/_DetalleOrden.cshtml", (List<NaturalMed.ViewModels.ViewModelFacturaDetalle>)ViewBag.FacturaProducto)
                        }
                        else
                        {
                            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                                La Orden no tiene Productos asignados
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        }
                    </div>
                    <br />
                    <br />
                </div>
   
                <br />
                <div class="col-md-12">
                    @* Enviar mensaje y guardar orden *@
                    <!-- Submit -->
                    <button type="submit" onclick="enviarMensaje()" class="btn btn-success btn-lg btn-primary" id="btnOrdenar" style="margin-bottom:5%; margin-top: -5%">
                        <i class="fab fa-whatsapp"></i> Enviar Orden
                    </button>
                </div>
            </div>
        </div>

        <div id="divMensaje">
            @* Creación del mensaje de Whatsapp *@
            @{
                if (NaturalMed.ViewModels.ViewModelCarrito.Instancia.Items.Count() > 0)
                {
                    decimal total = NaturalMed.ViewModels.ViewModelCarrito.Instancia.GetTotal();
                    //decimal ivaTotal = NaturalMed.ViewModels.ViewModelCarrito.Instancia.GetImpuesto();
                    int numOrden = NaturalMed.ViewModels.ViewModelCarrito.Instancia.Items[0].getUltimaOrdenId();

                    string mensaje = "Orden: # *" + numOrden + "*%0A" +
                        "Fecha: *" + now + "*%0A%0A" +
                        "*Productos:*%0A";

                    foreach (var item in (List<NaturalMed.ViewModels.ViewModelFacturaDetalle>)ViewBag.FacturaProducto)
                    {
                        mensaje += item.Producto.Descripcion + "*" +
                            "%0ACantidad: " + item.Cantidad +
                            "%0APrecio: ₡" + item.Precio.ToString("##,00.00") +
                            "%0ASubtotal: ₡" + item.SubTotal.ToString("##,00.00") + "%0A%0A";
                    }
                    mensaje += "%0A%0A✅ *Total Final: ₡" + total.ToString("##,00.00") + "* ✅";

                    <textarea id="mensaje" style="display: none; white-space: pre-wrap">@mensaje</textarea>
                }
            }
        </div>
    </div>
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryajax")
    @Scripts.Render("~/bundles/jqueryui")

    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    @* Método para obtener el texto del mensaje *@
    <script>
        function enviarMensaje() {
            var nombre = document.getElementsByClassName("Nombre").value;
            var apellidos = document.getElementsByClassName("Apellidos").value;
            if (nombre != "" && apellidos != "") {

                var texto = "*Resumen de la Orden* 📝%0A%0A" +
                    "Cliente: *" + nombre + " " + apellidos + "*%0A" +
                    document.getElementById("mensaje").value;

                var telefono = 50686636125;

                window.open("https://web.whatsapp.com/send?phone=" + telefono + "&text=" + texto, "_blank");
            }
            else {
                swal("Atención", "Por favor asegúrese de haber llenado todos los campos", "warning");
                return;
            }
        }

        function sleep(milliseconds) {
            const date = Date.now();
            let currentDate = null;
            do {
                currentDate = Date.now();
            } while (currentDate - date < milliseconds);
        }
    </script>

    <script type="text/javascript">

        //Actualizar cantidad de productos en el carrito
        //Cambio de cantidad en caja de texto
        function updateCantidad(ctr) {
            var txtCantidad = $(ctr);
            var cantidad = txtCantidad.val();
            var id = txtCantidad.data("productoid");
            $.ajax({
                type: "GET",
                dataType: 'text',
                url: "/Factura/actualizarCantidad",
                data: { "productoID": id, "cantidad": cantidad },
                success: function (data) {
                    $("#resultadoDetalle").html('');
                    $("#resultadoDetalle").html(data);
                    updateCantProductos();
                }, error: function (xhr, status, error) {
                    console.log("Error: " + error + ", No Error: " + xhr.status);
                },
            });
        }
        //Actualizar cantidad de productos en el menú
        function updateCantProductos() {
            $.ajax({
                type: "GET",
                dataType: 'text',
                url: "/Factura/actualizarFacturaCantidad",
                success: function (data) {
                    $("#cantidadProductos").html('');
                    $("#cantidadProductos").html(data);
                }, error: function (xhr, status, error) {
                    console.log("Error: " + error + ", No Error: " + xhr.status);
                },
            });
        }

    </script>
}


